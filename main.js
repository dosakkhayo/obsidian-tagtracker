/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var T=Object.prototype.hasOwnProperty;var b=(r,n)=>{for(var t in n)h(r,t,{get:n[t],enumerable:!0})},w=(r,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of F(n))!T.call(r,s)&&s!==t&&h(r,s,{get:()=>n[s],enumerable:!(e=f(n,s))||e.enumerable});return r};var E=r=>w(h({},"__esModule",{value:!0}),r);var v={};b(v,{default:()=>l});module.exports=E(v);var a=require("obsidian"),u={targetTag:"",sortMethod:"created",excludedFolders:[],noteTitleFormat:"${tag} tagged notes"},l=class extends a.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"tag-embedder-generate-note",name:"Generate note with embedded tagged notes",callback:async()=>{let t=await this.promptForTag();if(!t)return;this.settings.targetTag=t,await this.saveSettings();let e=this.getFormattedTitle(t)+".md";await this.generateEmbedNote(t,e)}}),this.registerEvent(this.app.metadataCache.on("changed",async t=>{if(this.settings.targetTag&&!this.isInExcludedFolder(t)){let e=this.app.metadataCache.getFileCache(t);if(e){let s=(0,a.getAllTags)(e);if(s!=null&&s.includes("#"+this.settings.targetTag)){let i=this.getFormattedTitle(this.settings.targetTag)+".md";await this.appendEmbedIfNotExists(t,i)}}}})),this.addSettingTab(new m(this.app,this))}getFormattedTitle(t){return this.settings.noteTitleFormat.replace(/\$\{tag\}/g,t)}isInExcludedFolder(t){return this.settings.excludedFolders.some(e=>t.path.startsWith(e+"/"))}async generateEmbedNote(t,e){let i=this.app.vault.getMarkdownFiles().filter(o=>{if(this.isInExcludedFolder(o))return!1;let g=this.app.metadataCache.getFileCache(o);if(!g)return!1;let c=(0,a.getAllTags)(g);return c==null?void 0:c.includes("#"+t)});switch(this.settings.sortMethod){case"created":i.sort((o,g)=>o.stat.ctime-g.stat.ctime);break;case"modified":i.sort((o,g)=>o.stat.mtime-g.stat.mtime);break;case"title":i.sort((o,g)=>o.basename.localeCompare(g.basename));break}let d=i.map(o=>`![[${o.basename}]]`).join(`
`);await this.app.vault.adapter.write(e,d),new a.Notice(`Embedded ${i.length} notes with tag #${t}`)}async appendEmbedIfNotExists(t,e){if(this.isInExcludedFolder(t))return;let s=this.app.vault.getAbstractFileByPath(e);if(!(s instanceof a.TFile))return;let i=await this.app.vault.read(s),d=`![[${t.basename}]]`;i.includes(d)||(await this.app.vault.modify(s,i+`
`+d),new a.Notice(`Appended embed for ${t.basename}`))}async promptForTag(){let t=new Set,e=this.app.vault.getMarkdownFiles();for(let s of e){let i=this.app.metadataCache.getFileCache(s);if(i){let d=(0,a.getAllTags)(i);d==null||d.forEach(o=>t.add(o))}}return new Promise(s=>{new p(this.app,Array.from(t),s).open()})}async loadSettings(){this.settings=Object.assign({},u,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};var p=class extends a.FuzzySuggestModal{constructor(t,e,s){super(t);this.options=e,this.onChoose=s}getItems(){return this.options}getItemText(t){return t}onChooseItem(t,e){this.onChoose(t.replace(/^#/,""))}},m=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Tag Embedder Settings"}),new a.Setting(t).setName("Sort method").setDesc("Select the sorting method for embedded notes.").addDropdown(e=>e.addOption("created","Created date").addOption("modified","Modified date").addOption("title","Title").setValue(this.plugin.settings.sortMethod).onChange(async s=>{this.plugin.settings.sortMethod=s,await this.plugin.saveSettings()})),new a.Setting(t).setName("Excluded folders").setDesc("Notes in these folders will be ignored even if they have the tag. (comma-separated)").addText(e=>e.setPlaceholder("e.g., Private, Archive").setValue(this.plugin.settings.excludedFolders.join(", ")).onChange(async s=>{this.plugin.settings.excludedFolders=s.split(",").map(i=>i.trim()).filter(Boolean),await this.plugin.saveSettings()})),new a.Setting(t).setName("Note title format").setDesc("e.g., ${tag} tagged notes").addText(e=>e.setPlaceholder("e.g., ${tag} tagged notes").setValue(this.plugin.settings.noteTitleFormat).onChange(async s=>{this.plugin.settings.noteTitleFormat=s||u.noteTitleFormat,await this.plugin.saveSettings()}))}};
